/*
    KCLS custom patron self-registration functions
*/

var invalid_fields = {};
var is_juvenile = false;
var required_fields = [
    'stgsc.10',
    'stgu.first_given_name',
    'stgu.family_name',
    'stgu.dob',
    'stgu.home_ou',
    'stgba.street1',
    'stgba.city',
    'stgba.state',
    'stgba.post_code',
    'stgu.day_phone'
];

var last_activity = new Date();
var phone_regex = new RegExp(/^\d{3}-\d{3}-\d{4}/);
var post_regex = new RegExp(/^\d{5}(?:[-\s]\d{4})?$/);

function take_responsibility() {
  var cbx = document.getElementById('take-responsibility');
  var btn = document.getElementById('main-submit');
  btn.disabled = !cbx.checked;
}

/* show/hide card options depending on the selected type. */
function show_card_types(type) {
    last_activity = new Date();
    var wal = document.getElementById('wallet-cards');
    var key = document.getElementById('keychain-cards');
    if (type == 'wallet') {
        wal.style.display = 'block';
        key.style.display = 'none';
    } else {
        wal.style.display = 'none';
        key.style.display = 'block';
    }

    // Select the first card in each group.
    // Cards are put into groups, but use the same form name.
    document.getElementById('first-'+type+'-card').checked = 'checked';
}

function select_card(type) {
    last_activity = new Date();
    console.log('selecting card: ' + type);
    $("input[value='" + type + "']").prop('checked', true);
}

function check_juvenile(dobString) {
    var dobDate = Date.parse(dobString);
    var ageDate = new Date(); // minimum age for non-juvenile
    ageDate.setFullYear(ageDate.getFullYear() - 18);
    is_juvenile = (dobDate > ageDate);
}

/*
Show or hide the mailing address.
*/
function show_hide_mailing(hide) {
    var display = hide ? 'none' : 'block';
    document.getElementById('mailing-address-1').style.display = display;
    document.getElementById('mailing-address-2').style.display = display;
    document.getElementById('mailing-address-3').style.display = display;
}

function show_hide_legal_name(hide) {
    var display = hide ? 'none' : 'block';
    document.getElementById('legal-name-div').style.display = display;
}

function validate(dom_id) {
    last_activity = new Date();
    var element = document.getElementById(dom_id);
    var value = element ? element.value : '';
    var valid = true;

    switch(dom_id) {
        case 'stgu.first_given_name':
            if (value) {
                delete invalid_fields[dom_id];
            } else {
                invalid_fields[dom_id] = 'Please include first name';
                valid = false;
            }

            break;

        case 'stgu.family_name':
            if (value) {
                delete invalid_fields[dom_id];
            } else {
                invalid_fields[dom_id] = 'Please include last name';
                valid = false;
            }

            break;

        case 'stgu.dob':
            // dob value is generated by compile_dob().
            if (value) {
                delete invalid_fields[dom_id];
                check_juvenile(value);
            } else {
                valid = false;
                is_juvenile = false;
                invalid_fields[dom_id] = 
                    "Please enter a valid date of birth.";
            }
            validate('stgu.ident_value2');
            break;

        case 'stgu.home_ou':
            if (value) {
                delete invalid_fields[dom_id];
            } else {
                invalid_fields[dom_id] = 'Please select a home library';
                valid = false;
            }
            break;

        case 'stgu.ident_value2': // parent/guardian
            // A value is only required if is_juvenile is true.
            valid = Boolean(value) || !is_juvenile;
            if (valid) {
                delete invalid_fields[dom_id];
            } else {
                invalid_fields[dom_id] = 
                    "Please list all parents or guardians living at your address."
            }

            break;

        case 'stgba.street1':
            if (value) {
                delete invalid_fields[dom_id];
            } else {
                valid = false;
                invalid_fields[dom_id] = "Please enter an address street";
            }
            break;

        case 'stgba.city':
            if (value) {
                delete invalid_fields[dom_id];
            } else {
                valid = false;
                invalid_fields[dom_id] = "Please enter an address city";
            }
            break;

        case 'stgba.post_code':
            if (value && value.match(post_regex)) {
                delete invalid_fields[dom_id];
            } else {
                valid = false;
                invalid_fields[dom_id] = "Please enter a valid zip/post code";
            }
            break;

        case 'stgu.day_phone':
            if (!value || value.match(phone_regex)) {
                delete invalid_fields[dom_id];
            } else {
                valid = false;
                invalid_fields[dom_id] = 
                    "Please use phone number format XXX-YYY-ZZZZ";
            }
            break;

          case 'stgsc.10':
            // stgsc.10 == card type stat cat.  Its values are represented
            // across multiple values.  Make sure at least one is selected.
            var found = false;
            var inputs = document.getElementsByTagName('input');
            for (var i = 0; i < inputs.length; i++) {
                var ipt = inputs[i];
                var name = ipt.getAttribute('name');
                if (name == 'stgsc.10' && ipt.checked) {
                    found = true;
                    break;
                }
            }

            if (found) {
                delete invalid_fields[dom_id];
            } else {
                invalid_fields[dom_id] = "Please select a card style."
            }
            break;

        case 'stgu.email':
        case 'none.email2':
            return validate_emails();
    }

    if (element) {
        if (valid) {
            $(element).removeClass('patron-reg-invalid');
        } else {
            $(element).addClass('patron-reg-invalid');
        }
    }
}

function validate_emails() {
    var email_elm = document.getElementById('stgu.email');
    var email2_elm = document.getElementById('none.email2');
    var email = email_elm.value;
    var email2 = email2_elm.value;

    if (email) {
        delete invalid_fields['stgu.email'];
        $(email_elm).removeClass('patron-reg-invalid');

        if (email == email2) {
            delete invalid_fields['none.email2'];
            $(email2_elm).removeClass('patron-reg-invalid');
        } else {
            $(email2_elm).addClass('patron-reg-invalid');
            invalid_fields['none.email2'] = 'Email addresses do not match';
        }

    } else if (email2) {

        delete invalid_fields['none.email2'];
        $(email2_elm).removeClass('patron-reg-invalid');

        invalid_fields['stgu.email'] = 'Email addresses do not match';
        $(email_elm).addClass('patron-reg-invalid');

    } else {

        // both empty is OK.
        delete invalid_fields['stgu.email'];
        delete invalid_fields['none.email2'];

        $(email_elm).removeClass('patron-reg-invalid');
        $(email2_elm).removeClass('patron-reg-invalid');
    }
}

function compile_dob() {
    var day = document.getElementById('dob.day').value || '';
    var mon = document.getElementById('dob.month').value || '';
    var year = document.getElementById('dob.year').value || '';
    var dob = document.getElementById('stgu.dob');
    var dob_display = document.getElementById('dob.display');

    if (day && mon && year.length == 4 && Number(year) >= 1900) {
        var dob_date = new Date(year, Number(mon) - 1, Number(day));

        if (dob_date) {

            // push the time forward by our timezone offset to force the
            // stored (UTC) date to match the entered date.
            dob_date.setTime(dob_date.getTime() + 
                dob_date.getTimezoneOffset() * 60 * 1000);

            dob.value = dob_date.toISOString().replace(/T.*/,'');
            dob_display.innerHTML = '(' + dob_date.toDateString() + ')';
            validate('stgu.dob');
            return;
        }
    }

    // date is incomplete or invalid.  clear the compiled dob value.
    dob.value = '';
    dob_display.innerHTML = '';
    validate('stgu.dob');
}

function compile_phone(event) {
    var area = document.getElementById('phone.area').value || '';
    var prefix = document.getElementById('phone.prefix').value || '';
    var suffix = document.getElementById('phone.suffix').value || '';
    var phone = document.getElementById('stgu.day_phone');

    phone.value = area + '-' + prefix + '-' + suffix;
    validate('stgu.day_phone');

    if (event) { 
        // Validating a single input which was modified.
        validate_one_phone_input(event.target.id);
    } else {
        // Validate all of the phone input fields
        var parts = ['phone.area', 'phone.prefix', 'phone.suffix'];
        for (var idx = 0; idx < parts.length; idx++) {
            validate_one_phone_input(parts[idx]); 
        }
    }
}

function validate_one_phone_input(domId) {
    var valid = false;
    var element = document.getElementById(domId);
    var value = element.value || '';
    switch(domId) {
        case 'phone.area':
        case 'phone.prefix':
            valid = value.match(/^\d{3}$/);
            break;
        case 'phone.suffix':
            valid = value.match(/^\d{4}$/);
            break;
    }

    if (valid) {
        $(element).removeClass('patron-reg-invalid');
    } else {
        $(element).addClass('patron-reg-invalid');
    }
}

/*
If we have collected any invalid field messages, bundle 
them into a single alert message, alert it, then prevent
the form from submitting by returning false.
*/
function onsub() {

    // force the validator to run on all required fields regardless
    // of whether they have been changed.
    for (var i = 0; i < required_fields.length; i++)
        validate(required_fields[i]);

    compile_phone(); // compile and validate

    var msg = '';
    for (var key in invalid_fields) {
        msg += '\n* ' + invalid_fields[key] + '\n';
    }

    if (msg) {
        alert(msg);
        return false;
    }

    if (typeof ga === 'function') {
        console.debug('sending GA Submit event');
        ga('send', 'event', 'Full Application', 'submit', 'Forms');
    }

    return true;
}

function handleCancel(url) {

    if (typeof ga === 'function') {
        console.debug('sending GA Cancel event');
        ga('send', 'event', 'Full Application', 'cancel', 'Forms');
    }

    location.href = url;
    return false; // avoid form submission 
}

function activity_checker_thread() {
    var start = last_activity.getTime();
    var end = new Date().getTime();
    var diff = end - start;

    var timeout = 
      document.getElementById('register-success') ?
      post_success_timeout : activity_timeout;

    console.debug('checking activity timeout=' + 
      timeout + ' : time range (ms) = ' + diff);

    if (diff > timeout) {
        location.href = timeout_redirect;
        return;
    }

    setTimeout(activity_checker_thread, 5000);
}


// No other onload should be firing for this page.
window.onload = function() {
    // Clear all values on page load to avoid browser-back leaking
    // sensitive information.
    // Note that disabling all page-level caching does not suffice.

    var inputs = document.getElementsByTagName('input');
    for (var i = 0; i < inputs.length; i++) {
        var input = inputs[i];
        var type_ = input.getAttribute('type');
        // avoid modifying input type=submit, checkbox's, radio's
        if (type_ == 'text') {
            input.value = '';
        }
    }

    activity_checker_thread();
}

